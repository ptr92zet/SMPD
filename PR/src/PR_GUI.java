import javax.swing.*;
import java.awt.event.ItemEvent;
import java.util.Arrays;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PR_GUI.java
 *
 * Created on 2015-03-05, 19:40:56
 */

/**
 *
 * @author krzy
 */
public class PR_GUI extends javax.swing.JFrame {

    AbstractFeatureSelector selector;
    AbstractClassifier classifier;
    
    /** Creates new form PR_GUI */
    public PR_GUI() {
        initComponents();
        setSize(720,410);
        selector = new FeatureSelectorImpl();
        selector.setSelectedDimension(Integer.parseInt((String)selectedFeatureSpaceNum.getSelectedItem()));

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbg_F = new javax.swing.ButtonGroup();
        readDatasetButton = new javax.swing.JButton();
        datasetPanel = new javax.swing.JPanel();
        datasetPanelLabel = new javax.swing.JLabel();
        datasetNameLabel = new javax.swing.JLabel();
        datasetClassesLabel = new javax.swing.JLabel();
        datasetFeaturesNumLabel = new javax.swing.JLabel();
        datasetFilenameField = new javax.swing.JLabel();
        featuresNumberField = new javax.swing.JLabel();
        classesNumberField = new javax.swing.JLabel();
        parseDatasetButton = new javax.swing.JButton();
        featureSpacePanel = new javax.swing.JPanel();
        featureSpacePanelLabel = new javax.swing.JLabel();
        featureSpaceDimLabel = new javax.swing.JLabel();
        selectedFeatureSpaceNum = new javax.swing.JComboBox();
        featureSelectionRadio = new javax.swing.JRadioButton();
        deriveFeatureSpaceButton = new javax.swing.JButton();
        useSfsCheckBox = new javax.swing.JCheckBox();
        resultsSelectionPanel = new javax.swing.JPanel();
        fsWinnerLabel = new javax.swing.JLabel();
        fldWinnerField = new javax.swing.JLabel();
        fldValueLabel = new javax.swing.JLabel();
        fldWinnerValueField = new javax.swing.JLabel();
        classifierPanel = new javax.swing.JPanel();
        classifierPanelLabel = new javax.swing.JLabel();
        classifierSelectComboBox = new javax.swing.JComboBox();
        trainButton = new javax.swing.JButton();
        executeButton = new javax.swing.JButton();
        trainingPartLabel = new javax.swing.JLabel();
        trainSetSizeField = new javax.swing.JTextField();
        percentLabel2 = new javax.swing.JLabel();
        classifierMethodLabel1 = new javax.swing.JLabel();
        kParameterLabel = new javax.swing.JLabel();
        kParameterTextField = new javax.swing.JTextField();
        resultsClassificationPanel = new javax.swing.JPanel();
        resultsClassificationField = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Feature Selection and Classification - SMPD");
        setMaximumSize(new java.awt.Dimension(650, 300));
        setMinimumSize(new java.awt.Dimension(650, 300));
        setPreferredSize(new java.awt.Dimension(650, 300));
        getContentPane().setLayout(null);

        readDatasetButton.setText("Read dataset");
        readDatasetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readDatasetButtonActionPerformed(evt);
            }
        });
        getContentPane().add(readDatasetButton);
        readDatasetButton.setBounds(20, 10, 130, 23);

        datasetPanel.setBackground(new java.awt.Color(204, 255, 255));
        datasetPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        datasetPanelLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        datasetPanelLabel.setText("Dataset info");

        datasetNameLabel.setText("Name:");

        datasetClassesLabel.setText("Classes:");

        datasetFeaturesNumLabel.setText("Features:");

        datasetFilenameField.setText("...");

        featuresNumberField.setText("...");

        classesNumberField.setText("...");

        javax.swing.GroupLayout datasetPanelLayout = new javax.swing.GroupLayout(datasetPanel);
        datasetPanel.setLayout(datasetPanelLayout);
        datasetPanelLayout.setHorizontalGroup(
            datasetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datasetPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(datasetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(datasetPanelLabel)
                    .addComponent(datasetFilenameField, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datasetNameLabel))
                .addGap(14, 14, 14)
                .addGroup(datasetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(datasetPanelLayout.createSequentialGroup()
                        .addComponent(datasetClassesLabel)
                        .addGap(13, 13, 13)
                        .addComponent(classesNumberField, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
                    .addGroup(datasetPanelLayout.createSequentialGroup()
                        .addComponent(datasetFeaturesNumLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(featuresNumberField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        datasetPanelLayout.setVerticalGroup(
            datasetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datasetPanelLayout.createSequentialGroup()
                .addGroup(datasetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(datasetPanelLayout.createSequentialGroup()
                        .addGroup(datasetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(datasetPanelLabel)
                            .addComponent(datasetClassesLabel))
                        .addGap(10, 10, 10)
                        .addComponent(datasetNameLabel))
                    .addGroup(datasetPanelLayout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(classesNumberField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(datasetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datasetFilenameField)
                    .addComponent(datasetFeaturesNumLabel)
                    .addComponent(featuresNumberField))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        getContentPane().add(datasetPanel);
        datasetPanel.setBounds(10, 50, 360, 90);

        parseDatasetButton.setText("Parse dataset");
        parseDatasetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parseDatasetButtonActionPerformed(evt);
            }
        });
        getContentPane().add(parseDatasetButton);
        parseDatasetButton.setBounds(230, 10, 130, 23);

        featureSpacePanel.setBackground(new java.awt.Color(255, 255, 204));
        featureSpacePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        featureSpacePanel.setLayout(null);

        featureSpacePanelLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        featureSpacePanelLabel.setText("Feature space");
        featureSpacePanel.add(featureSpacePanelLabel);
        featureSpacePanelLabel.setBounds(14, 2, 118, 26);

        featureSpaceDimLabel.setText("FS Dimension");
        featureSpacePanel.add(featureSpaceDimLabel);
        featureSpaceDimLabel.setBounds(178, 9, 63, 14);

        selectedFeatureSpaceNum.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64" }));
        selectedFeatureSpaceNum.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectedFeatureSpaceNumItemStateChanged(evt);
            }
        });
        featureSpacePanel.add(selectedFeatureSpaceNum);
        selectedFeatureSpaceNum.setBounds(249, 6, 60, 20);

        featureSelectionRadio.setBackground(new java.awt.Color(255, 255, 204));
        rbg_F.add(featureSelectionRadio);
        featureSelectionRadio.setSelected(true);
        featureSelectionRadio.setText("Feature selection");
        featureSpacePanel.add(featureSelectionRadio);
        featureSelectionRadio.setBounds(10, 40, 109, 23);

        deriveFeatureSpaceButton.setText("Derive Feature Space");
        deriveFeatureSpaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deriveFeatureSpaceButtonActionPerformed(evt);
            }
        });
        featureSpacePanel.add(deriveFeatureSpaceButton);
        deriveFeatureSpaceButton.setBounds(10, 70, 340, 23);

        useSfsCheckBox.setText("SFS");
        useSfsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useSfsCheckBoxActionPerformed(evt);
            }
        });
        featureSpacePanel.add(useSfsCheckBox);
        useSfsCheckBox.setBounds(130, 40, 110, 23);

        resultsSelectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Results of feature selection"));
        resultsSelectionPanel.setLayout(null);

        fsWinnerLabel.setText("FS Winners:");
        resultsSelectionPanel.add(fsWinnerLabel);
        fsWinnerLabel.setBounds(10, 20, 70, 14);

        fldWinnerField.setText("...");
        resultsSelectionPanel.add(fldWinnerField);
        fldWinnerField.setBounds(10, 40, 320, 14);

        fldValueLabel.setText("FLD value: ");
        resultsSelectionPanel.add(fldValueLabel);
        fldValueLabel.setBounds(10, 60, 70, 14);

        fldWinnerValueField.setText("...");
        fldWinnerValueField.setToolTipText("");
        resultsSelectionPanel.add(fldWinnerValueField);
        fldWinnerValueField.setBounds(10, 80, 320, 14);

        featureSpacePanel.add(resultsSelectionPanel);
        resultsSelectionPanel.setBounds(10, 110, 340, 100);
        resultsSelectionPanel.getAccessibleContext().setAccessibleName("Results of feature selection");

        getContentPane().add(featureSpacePanel);
        featureSpacePanel.setBounds(10, 150, 360, 220);

        classifierPanel.setBackground(new java.awt.Color(204, 255, 204));
        classifierPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        classifierPanel.setLayout(null);

        classifierPanelLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        classifierPanelLabel.setText("Classifier");
        classifierPanel.add(classifierPanelLabel);
        classifierPanelLabel.setBounds(10, 0, 79, 26);

        classifierSelectComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "                           ", "Nearest neighbor (NN)", "Nearest Mean (NM)", "k-Nearest Neighbor (k-NN)", "k-Nearest Mean (k-NM)" }));
        classifierSelectComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                classifierSelectComboBoxItemStateChanged(evt);
            }
        });
        classifierPanel.add(classifierSelectComboBox);
        classifierSelectComboBox.setBounds(74, 41, 152, 20);

        trainButton.setText("Train");
        trainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainButtonActionPerformed(evt);
            }
        });
        classifierPanel.add(trainButton);
        trainButton.setBounds(10, 80, 98, 23);

        executeButton.setText("Execute");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });
        classifierPanel.add(executeButton);
        executeButton.setBounds(210, 80, 96, 23);

        trainingPartLabel.setText("Training part:");
        classifierPanel.add(trainingPartLabel);
        trainingPartLabel.setBounds(10, 120, 80, 14);

        trainSetSizeField.setText("80");
        classifierPanel.add(trainSetSizeField);
        trainSetSizeField.setBounds(100, 116, 20, 20);

        percentLabel2.setText("%");
        classifierPanel.add(percentLabel2);
        percentLabel2.setBounds(130, 120, 20, 14);

        classifierMethodLabel1.setText("Method");
        classifierPanel.add(classifierMethodLabel1);
        classifierMethodLabel1.setBounds(14, 44, 60, 14);

        kParameterLabel.setText("k:");
        classifierPanel.add(kParameterLabel);
        kParameterLabel.setBounds(250, 44, 20, 14);

        kParameterTextField.setText("5");
        kParameterTextField.setEnabled(false);
        classifierPanel.add(kParameterTextField);
        kParameterTextField.setBounds(270, 41, 30, 20);

        getContentPane().add(classifierPanel);
        classifierPanel.setBounds(390, 10, 320, 160);

        resultsClassificationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Results of classification"));
        resultsClassificationPanel.setLayout(null);

        resultsClassificationField.setText("...");
        resultsClassificationField.setName(""); // NOI18N
        resultsClassificationPanel.add(resultsClassificationField);
        resultsClassificationField.setBounds(10, 20, 300, 160);

        getContentPane().add(resultsClassificationPanel);
        resultsClassificationPanel.setBounds(390, 180, 320, 190);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void readDatasetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readDatasetButtonActionPerformed
        selector.readDataSetFromFile();
        datasetFilenameField.setText(selector.getInputDataFileName());
    }//GEN-LAST:event_readDatasetButtonActionPerformed

    private void parseDatasetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parseDatasetButtonActionPerformed
        if (selector.isDataSetRead()) {
            selector.createClassMatrixes();
            featuresNumberField.setText(selector.getFeatureCount()+"");
            classesNumberField.setText(selector.getClassesNames());
        }
        else {
            JOptionPane.showMessageDialog(null, "You need to read data set first!");
        }
    }//GEN-LAST:event_parseDatasetButtonActionPerformed

    private void deriveFeatureSpaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deriveFeatureSpaceButtonActionPerformed
        if(featureSelectionRadio.isSelected()){
            if (selector.isDataSetParsed()) {
                selector.selectFeatures();
                fldWinnerField.setText(Arrays.toString(selector.getFeatureWinnersFLD()));
                fldWinnerValueField.setText(selector.getBestFeatureFLD()+"");
            }
            else {
                JOptionPane.showMessageDialog(null, "You need to parse data set first!");
            }
        }
        else {
            
        }
    }//GEN-LAST:event_deriveFeatureSpaceButtonActionPerformed

    private void trainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainButtonActionPerformed
        if (classifier != null) {
            classifier.generateTrainingAndTestSets(Double.parseDouble(trainSetSizeField.getText())/100.0);
            String results = classifier.getTrainingAndTestSetsSizes();
            resultsClassificationField.setText(results);
            results = results.replaceAll("<br>", "\n");
            System.out.println(results);
        }
        else {
            JOptionPane.showMessageDialog(null, "You need to select the classifier first!");
        }
    }//GEN-LAST:event_trainButtonActionPerformed

    private void selectedFeatureSpaceNumItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectedFeatureSpaceNumItemStateChanged
        selector.setSelectedDimension(Integer.parseInt((String)selectedFeatureSpaceNum.getSelectedItem()));
    }//GEN-LAST:event_selectedFeatureSpaceNumItemStateChanged
    
    private void useSfsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useSfsCheckBoxActionPerformed
        if (useSfsCheckBox.isSelected()) {
            selector = new FeatureSelectorSfsImpl();
        }
        else {
            selector = new FeatureSelectorImpl();
        }
        selector.setSelectedDimension(Integer.parseInt((String)selectedFeatureSpaceNum.getSelectedItem()));
        selector.readDataSetFromFile();
        datasetFilenameField.setText(selector.getInputDataFileName());
        if (selector.isDataSetRead()) {
            selector.createClassMatrixes();
            featuresNumberField.setText(selector.getFeatureCount()+"");
        }
        else {
            JOptionPane.showMessageDialog(null, "You need to read data set first!");
        }
    }//GEN-LAST:event_useSfsCheckBoxActionPerformed

    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        if (classifier != null) {
            if (classifier.isDataSetTrained()) {
                classifier.classify();
                String results = classifier.getClassificationResults();
                resultsClassificationField.setText(results);
                results = results.replaceAll("<br>", "\n");
                System.out.println(results);
            }
            else {
                JOptionPane.showMessageDialog(null, "You need to train data set first!");
            }   
        }
        else {
            JOptionPane.showMessageDialog(null, "You need to select the classifier first!");
        }
    }//GEN-LAST:event_executeButtonActionPerformed

    private void classifierSelectComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_classifierSelectComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (selector.getFeatureWinnersFLD() != null) {
                int classifierTypeIndex = classifierSelectComboBox.getSelectedIndex();
                System.out.println("selectedIndex: " + classifierTypeIndex);
                switch (classifierTypeIndex) {
                    case 0:
                        System.out.println("Nothing selected!");
                        kParameterTextField.setEnabled(false);
                        break;
                    case 1:
                        System.out.println("Creating new NNClassifier!");
                        kParameterTextField.setEnabled(false);
                        classifier = new NNClassifier(selector);
                        break;
                    case 2:
                        System.out.println("Creating new NMClassifier!");
                        kParameterTextField.setEnabled(false);
                        classifier = new NMClassifier(selector);
                        break;
                    case 3:
                        System.out.println("Creating new KNNClassifier!");
                        kParameterTextField.setEnabled(true);
                        int k = Integer.parseInt(kParameterTextField.getText());
                        if (k%2 != 0) {
                            classifier = new KNNClassifier(Double.parseDouble(trainSetSizeField.getText())/100.0, selector, k);
                        }
                        else {
                            JOptionPane.showMessageDialog(null, "k parameter must be an odd number!\nType k one more time.");
                        }
                        break;
                    case 4:
                        resultsClassificationField.setText("Nothing happens! This classifier is not implemented.");
                        System.out.println("Nothing happens! This classifier is not implemented.");
                        kParameterTextField.setEnabled(false);
                        classifier = null;
                        break;
                }
            }
            else {
                JOptionPane.showMessageDialog(null, "You need to derive feature space first!");
            }
        }
    }//GEN-LAST:event_classifierSelectComboBoxItemStateChanged

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(() -> {
            new PR_GUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel classesNumberField;
    private javax.swing.JLabel classifierMethodLabel1;
    private javax.swing.JPanel classifierPanel;
    private javax.swing.JLabel classifierPanelLabel;
    private javax.swing.JComboBox classifierSelectComboBox;
    private javax.swing.JLabel datasetClassesLabel;
    private javax.swing.JLabel datasetFeaturesNumLabel;
    private javax.swing.JLabel datasetFilenameField;
    private javax.swing.JLabel datasetNameLabel;
    private javax.swing.JPanel datasetPanel;
    private javax.swing.JLabel datasetPanelLabel;
    private javax.swing.JButton deriveFeatureSpaceButton;
    private javax.swing.JButton executeButton;
    private javax.swing.JRadioButton featureSelectionRadio;
    private javax.swing.JLabel featureSpaceDimLabel;
    private javax.swing.JPanel featureSpacePanel;
    private javax.swing.JLabel featureSpacePanelLabel;
    private javax.swing.JLabel featuresNumberField;
    private javax.swing.JLabel fldValueLabel;
    private javax.swing.JLabel fldWinnerField;
    private javax.swing.JLabel fldWinnerValueField;
    private javax.swing.JLabel fsWinnerLabel;
    private javax.swing.JLabel kParameterLabel;
    private javax.swing.JTextField kParameterTextField;
    private javax.swing.JButton parseDatasetButton;
    private javax.swing.JLabel percentLabel2;
    private javax.swing.ButtonGroup rbg_F;
    private javax.swing.JButton readDatasetButton;
    private javax.swing.JLabel resultsClassificationField;
    private javax.swing.JPanel resultsClassificationPanel;
    private javax.swing.JPanel resultsSelectionPanel;
    private javax.swing.JComboBox selectedFeatureSpaceNum;
    private javax.swing.JButton trainButton;
    private javax.swing.JTextField trainSetSizeField;
    private javax.swing.JLabel trainingPartLabel;
    private javax.swing.JCheckBox useSfsCheckBox;
    // End of variables declaration//GEN-END:variables

}