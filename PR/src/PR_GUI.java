
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import Jama.*;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PR_GUI.java
 *
 * Created on 2015-03-05, 19:40:56
 */

/**
 *
 * @author krzy
 */
public class PR_GUI extends javax.swing.JFrame {

    FeatureSelector selector;
//    String InputDataFromFile; // dataset from a text file will be placed here
 //   int ClassCount=0, FeatureCount=0;
    double[][] F, FNew; // original feature matrix and transformed feature matrix
 //   int[] ClassLabels, SampleCount;
  //  String[] ClassNames;

    /** Creates new form PR_GUI */
    public PR_GUI() {
        initComponents();
        setSize(720,410);
        selector = new FeatureSelector();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbg_F = new javax.swing.ButtonGroup();
        readDatasetButton = new javax.swing.JButton();
        datasetPanel = new javax.swing.JPanel();
        datasetPanelLabel = new javax.swing.JLabel();
        datasetNameLabel = new javax.swing.JLabel();
        datasetClassesLabel = new javax.swing.JLabel();
        datasetFeaturesNumLabel = new javax.swing.JLabel();
        datasetFilenameField = new javax.swing.JLabel();
        featuresNumberField = new javax.swing.JLabel();
        parseDatasetButton = new javax.swing.JButton();
        featureSpacePanel = new javax.swing.JPanel();
        featureSpacePanelLabel = new javax.swing.JLabel();
        featureSpaceDimLabel = new javax.swing.JLabel();
        selectedFeatureSpaceNum = new javax.swing.JComboBox();
        fsSeparator = new javax.swing.JSeparator();
        featureExtractionRadio = new javax.swing.JRadioButton();
        featureSelectionRadio = new javax.swing.JRadioButton();
        deriveFeatureSpaceButton = new javax.swing.JButton();
        criterionLabel = new javax.swing.JLabel();
        criterionComboBox = new javax.swing.JComboBox();
        pcaLDAComboBox = new javax.swing.JComboBox();
        energyLabel = new javax.swing.JLabel();
        pcaEnergyField = new javax.swing.JTextField();
        percentLabel1 = new javax.swing.JLabel();
        newDimensionLabel = new javax.swing.JLabel();
        newDimensionField = new javax.swing.JLabel();
        bigResultsPanel = new javax.swing.JPanel();
        classifierPanel = new javax.swing.JPanel();
        classifierPanelLabel = new javax.swing.JLabel();
        classifierMethodLabel = new javax.swing.JLabel();
        classifierSelectComboBox = new javax.swing.JComboBox();
        trainButton = new javax.swing.JButton();
        executeButton = new javax.swing.JButton();
        trainingPartLabel = new javax.swing.JLabel();
        trainSetSizeField = new javax.swing.JTextField();
        percentLabel2 = new javax.swing.JLabel();
        resultsPanel = new javax.swing.JPanel();
        fsWinnerLabel = new javax.swing.JLabel();
        fldWinnerField = new javax.swing.JLabel();
        fldValueLabel = new javax.swing.JLabel();
        fldWinnerValueField = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        readDatasetButton.setText("Read dataset");
        readDatasetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readDatasetButtonActionPerformed(evt);
            }
        });
        getContentPane().add(readDatasetButton);
        readDatasetButton.setBounds(20, 10, 130, 23);

        datasetPanel.setBackground(new java.awt.Color(204, 255, 255));
        datasetPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        datasetPanelLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        datasetPanelLabel.setText("Dataset info");

        datasetNameLabel.setText("Name:");

        datasetClassesLabel.setText("Classes:");

        datasetFeaturesNumLabel.setText("Features:");

        datasetFilenameField.setText("...");

        featuresNumberField.setText("...");

        javax.swing.GroupLayout datasetPanelLayout = new javax.swing.GroupLayout(datasetPanel);
        datasetPanel.setLayout(datasetPanelLayout);
        datasetPanelLayout.setHorizontalGroup(
            datasetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, datasetPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(datasetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(datasetPanelLayout.createSequentialGroup()
                        .addComponent(datasetNameLabel)
                        .addGap(18, 18, 18)
                        .addComponent(datasetFilenameField))
                    .addComponent(datasetPanelLabel))
                .addGroup(datasetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(datasetPanelLayout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(datasetClassesLabel))
                    .addGroup(datasetPanelLayout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(datasetFeaturesNumLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(featuresNumberField)))
                .addGap(100, 100, 100))
        );
        datasetPanelLayout.setVerticalGroup(
            datasetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(datasetPanelLayout.createSequentialGroup()
                .addGroup(datasetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datasetPanelLabel)
                    .addComponent(datasetClassesLabel))
                .addGap(10, 10, 10)
                .addGroup(datasetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(datasetNameLabel)
                    .addComponent(datasetFeaturesNumLabel)
                    .addComponent(datasetFilenameField)
                    .addComponent(featuresNumberField))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        getContentPane().add(datasetPanel);
        datasetPanel.setBounds(10, 50, 320, 80);

        parseDatasetButton.setText("Parse dataset");
        parseDatasetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                parseDatasetButtonActionPerformed(evt);
            }
        });
        getContentPane().add(parseDatasetButton);
        parseDatasetButton.setBounds(190, 10, 130, 23);

        featureSpacePanel.setBackground(new java.awt.Color(255, 255, 204));
        featureSpacePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        featureSpacePanel.setLayout(null);

        featureSpacePanelLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        featureSpacePanelLabel.setText("Feature space");
        featureSpacePanel.add(featureSpacePanelLabel);
        featureSpacePanelLabel.setBounds(14, 2, 118, 26);

        featureSpaceDimLabel.setText("FS Dimension");
        featureSpacePanel.add(featureSpaceDimLabel);
        featureSpaceDimLabel.setBounds(178, 9, 63, 14);

        selectedFeatureSpaceNum.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1" }));
        selectedFeatureSpaceNum.setEnabled(false);
        featureSpacePanel.add(selectedFeatureSpaceNum);
        selectedFeatureSpaceNum.setBounds(268, 6, 31, 20);
        featureSpacePanel.add(fsSeparator);
        fsSeparator.setBounds(14, 41, 290, 10);

        featureExtractionRadio.setBackground(new java.awt.Color(255, 255, 204));
        rbg_F.add(featureExtractionRadio);
        featureExtractionRadio.setText("Feature extraction");
        featureExtractionRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                featureExtractionRadioActionPerformed(evt);
            }
        });
        featureSpacePanel.add(featureExtractionRadio);
        featureExtractionRadio.setBounds(10, 110, 115, 23);

        featureSelectionRadio.setBackground(new java.awt.Color(255, 255, 204));
        rbg_F.add(featureSelectionRadio);
        featureSelectionRadio.setSelected(true);
        featureSelectionRadio.setText("Feature selection");
        featureSelectionRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                featureSelectionRadioActionPerformed(evt);
            }
        });
        featureSpacePanel.add(featureSelectionRadio);
        featureSelectionRadio.setBounds(10, 60, 109, 23);

        deriveFeatureSpaceButton.setText("Derive Feature Space");
        deriveFeatureSpaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deriveFeatureSpaceButtonActionPerformed(evt);
            }
        });
        featureSpacePanel.add(deriveFeatureSpaceButton);
        deriveFeatureSpaceButton.setBounds(10, 180, 292, 23);

        criterionLabel.setText("Criterion");
        featureSpacePanel.add(criterionLabel);
        criterionLabel.setBounds(200, 50, 41, 14);

        criterionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fisher discriminant", "Classification error" }));
        criterionComboBox.setEnabled(false);
        featureSpacePanel.add(criterionComboBox);
        criterionComboBox.setBounds(160, 70, 140, 20);

        pcaLDAComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "PCA", "LDA" }));
        pcaLDAComboBox.setEnabled(false);
        featureSpacePanel.add(pcaLDAComboBox);
        pcaLDAComboBox.setBounds(190, 110, 70, 20);

        energyLabel.setText("Energy");
        featureSpacePanel.add(energyLabel);
        energyLabel.setBounds(20, 150, 34, 14);

        pcaEnergyField.setText("80");
        featureSpacePanel.add(pcaEnergyField);
        pcaEnergyField.setBounds(70, 150, 30, 20);

        percentLabel1.setText("%");
        featureSpacePanel.add(percentLabel1);
        percentLabel1.setBounds(110, 150, 20, 14);

        newDimensionLabel.setText("New dimension:");
        featureSpacePanel.add(newDimensionLabel);
        newDimensionLabel.setBounds(160, 150, 75, 14);

        newDimensionField.setText("...");
        featureSpacePanel.add(newDimensionField);
        newDimensionField.setBounds(270, 150, 30, 14);

        getContentPane().add(featureSpacePanel);
        featureSpacePanel.setBounds(10, 140, 320, 220);

        bigResultsPanel.setBackground(new java.awt.Color(255, 255, 255));
        bigResultsPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout bigResultsPanelLayout = new javax.swing.GroupLayout(bigResultsPanel);
        bigResultsPanel.setLayout(bigResultsPanelLayout);
        bigResultsPanelLayout.setHorizontalGroup(
            bigResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 156, Short.MAX_VALUE)
        );
        bigResultsPanelLayout.setVerticalGroup(
            bigResultsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );

        getContentPane().add(bigResultsPanel);
        bigResultsPanel.setBounds(530, 10, 160, 130);

        classifierPanel.setBackground(new java.awt.Color(204, 255, 204));
        classifierPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        classifierPanel.setLayout(null);

        classifierPanelLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 18)); // NOI18N
        classifierPanelLabel.setText("Classifier");
        classifierPanel.add(classifierPanelLabel);
        classifierPanelLabel.setBounds(10, 0, 79, 26);

        classifierMethodLabel.setText("Method");
        classifierPanel.add(classifierMethodLabel);
        classifierMethodLabel.setBounds(14, 44, 36, 14);

        classifierSelectComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nearest neighbor (NN)", "Nearest Mean (NM)", "k-Nearest Neighbor (k-NN)", "k-Nearest Mean (k-NM)" }));
        classifierPanel.add(classifierSelectComboBox);
        classifierSelectComboBox.setBounds(74, 41, 152, 20);

        trainButton.setText("Train");
        trainButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trainButtonActionPerformed(evt);
            }
        });
        classifierPanel.add(trainButton);
        trainButton.setBounds(40, 130, 98, 23);

        executeButton.setText("Execute");
        classifierPanel.add(executeButton);
        executeButton.setBounds(210, 130, 96, 23);

        trainingPartLabel.setText("Training part:");
        classifierPanel.add(trainingPartLabel);
        trainingPartLabel.setBounds(20, 170, 80, 14);

        trainSetSizeField.setText("80");
        classifierPanel.add(trainSetSizeField);
        trainSetSizeField.setBounds(110, 170, 20, 20);

        percentLabel2.setText("%");
        classifierPanel.add(percentLabel2);
        percentLabel2.setBounds(140, 170, 20, 14);

        getContentPane().add(classifierPanel);
        classifierPanel.setBounds(340, 150, 350, 210);

        resultsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Results"));
        resultsPanel.setLayout(null);

        fsWinnerLabel.setText("FS Winner:");
        resultsPanel.add(fsWinnerLabel);
        fsWinnerLabel.setBounds(10, 30, 70, 14);

        fldWinnerField.setText("xxx");
        resultsPanel.add(fldWinnerField);
        fldWinnerField.setBounds(100, 30, 18, 14);

        fldValueLabel.setText("FLD value: ");
        resultsPanel.add(fldValueLabel);
        fldValueLabel.setBounds(10, 60, 70, 14);

        fldWinnerValueField.setText("vvv");
        resultsPanel.add(fldWinnerValueField);
        fldWinnerValueField.setBounds(100, 60, 48, 14);

        getContentPane().add(resultsPanel);
        resultsPanel.setBounds(340, 10, 160, 130);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void featureSelectionRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_featureSelectionRadioActionPerformed
        criterionComboBox.setEnabled(true);
        pcaLDAComboBox.setEnabled(false);
    }//GEN-LAST:event_featureSelectionRadioActionPerformed

    private void featureExtractionRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_featureExtractionRadioActionPerformed
        criterionComboBox.setEnabled(false);
        pcaLDAComboBox.setEnabled(true);
    }//GEN-LAST:event_featureExtractionRadioActionPerformed

    private void readDatasetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readDatasetButtonActionPerformed
        // reads in a text file; contents is placed into a variable of String type
        selector.readDataSetFromFile();
        datasetFilenameField.setText(selector.getInputDataFileName());
    }//GEN-LAST:event_readDatasetButtonActionPerformed

    private void parseDatasetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_parseDatasetButtonActionPerformed
        // Analyze text inputted from a file: determine class number and labels and number
        // of features; build feature matrix: columns - samples, rows - features
        try {
            if(selector.getInputData()!=null) {
                selector.getDatasetParameters();
                featuresNumberField.setText(selector.getFeatureCount()+"");
                selector.fillFeatureMatrix();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,ex.getMessage());
        }
        
    }//GEN-LAST:event_parseDatasetButtonActionPerformed

    private void deriveFeatureSpaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deriveFeatureSpaceButtonActionPerformed
        // derive optimal feature space
        if(F==null) return;
        if(featureSelectionRadio.isSelected()){
            // the chosen strategy is feature selection
            int[] flags = new int[selector.getFeatureCount()];
            selectFeatures(flags,Integer.parseInt((String)selectedFeatureSpaceNum.getSelectedItem()));
        }
        else if(featureExtractionRadio.isSelected()){
            double TotEnergy=Double.parseDouble(pcaEnergyField.getText())/100.0;
            // Target dimension (if k>0) or flag for energy-based dimension (k=0)
            int k=0;
//            double[][] FF = { {1,1}, {1,2}};
//            double[][] FF = { {-2,0,2}, {-1,0,1}};
            // F is an array of initial features, FNew is the resulting array
            double[][] FFNorm = centerAroundMean(F); 
            Matrix Cov = computeCovarianceMatrix(FFNorm);
            Matrix TransformMat = extractFeatures(Cov,TotEnergy, k);     
            FNew = projectSamples(new Matrix(FFNorm),TransformMat);
            // FNew is a matrix with samples projected to a new feature space
            newDimensionField.setText(FNew.length+"");
        }
    }//GEN-LAST:event_deriveFeatureSpaceButtonActionPerformed

    private void trainButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trainButtonActionPerformed
        
        // first step: split dataset (in new feature space) into training / testing parts
        if(FNew==null) return; // no reduced feature space have been derived
        Classifier Cl = new Classifier();
        Cl.generateTraining_and_Test_Sets(FNew, trainSetSizeField.getText());

    }//GEN-LAST:event_trainButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PR_GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bigResultsPanel;
    private javax.swing.JLabel classifierMethodLabel;
    private javax.swing.JPanel classifierPanel;
    private javax.swing.JLabel classifierPanelLabel;
    private javax.swing.JComboBox classifierSelectComboBox;
    private javax.swing.JComboBox criterionComboBox;
    private javax.swing.JLabel criterionLabel;
    private javax.swing.JLabel datasetClassesLabel;
    private javax.swing.JLabel datasetFeaturesNumLabel;
    private javax.swing.JLabel datasetFilenameField;
    private javax.swing.JLabel datasetNameLabel;
    private javax.swing.JPanel datasetPanel;
    private javax.swing.JLabel datasetPanelLabel;
    private javax.swing.JButton deriveFeatureSpaceButton;
    private javax.swing.JLabel energyLabel;
    private javax.swing.JButton executeButton;
    private javax.swing.JRadioButton featureExtractionRadio;
    private javax.swing.JRadioButton featureSelectionRadio;
    private javax.swing.JLabel featureSpaceDimLabel;
    private javax.swing.JPanel featureSpacePanel;
    private javax.swing.JLabel featureSpacePanelLabel;
    private javax.swing.JLabel featuresNumberField;
    private javax.swing.JLabel fldValueLabel;
    private javax.swing.JLabel fldWinnerField;
    private javax.swing.JLabel fldWinnerValueField;
    private javax.swing.JSeparator fsSeparator;
    private javax.swing.JLabel fsWinnerLabel;
    private javax.swing.JLabel newDimensionField;
    private javax.swing.JLabel newDimensionLabel;
    private javax.swing.JButton parseDatasetButton;
    private javax.swing.JTextField pcaEnergyField;
    private javax.swing.JComboBox pcaLDAComboBox;
    private javax.swing.JLabel percentLabel1;
    private javax.swing.JLabel percentLabel2;
    private javax.swing.ButtonGroup rbg_F;
    private javax.swing.JButton readDatasetButton;
    private javax.swing.JPanel resultsPanel;
    private javax.swing.JComboBox selectedFeatureSpaceNum;
    private javax.swing.JButton trainButton;
    private javax.swing.JTextField trainSetSizeField;
    private javax.swing.JLabel trainingPartLabel;
    // End of variables declaration//GEN-END:variables

    private void selectFeatures(int[] flags, int d) {
        // for now: check all individual features using 1D, 2-class Fisher criterion

        if(d==1){
            double FLD=0, tmp;
            int max_ind=-1;        
            for(int i=0; i<selector.getFeatureCount(); i++){
                if((tmp=computeFisherLD(F[i]))>FLD){
                    FLD=tmp;
                    max_ind = i;
                }
            }
            fldWinnerField.setText(max_ind+"");
            fldWinnerValueField.setText(FLD+"");
        }
        // to do: compute for higher dimensional spaces, use e.g. SFS for candidate selection
    }

    private double computeFisherLD(double[] vec) {
        // 1D, 2-classes
        double mA=0, mB=0, sA=0, sB=0;
        for(int i=0; i<vec.length; i++){
            if(ClassLabels[i]==0) {
                mA += vec[i];
                sA += vec[i]*vec[i];
            }
            else {
                mB += vec[i];
                sB += vec[i]*vec[i];
            }
        }
        mA /= SampleCount[0];
        mB /= SampleCount[1];
        sA = sA/SampleCount[0] - mA*mA;
        sB = sB/SampleCount[1] - mB*mB;
        return Math.abs(mA-mB)/(Math.sqrt(sA)+Math.sqrt(sB));
    }

    private Matrix extractFeatures(Matrix C, double Ek, int k) {               
        
        Matrix evecs, evals;
        // compute eigenvalues and eigenvectors
        evecs = C.eig().getV();
        evals = C.eig().getD();
        
        // PM: projection matrix that will hold a set dominant eigenvectors
        Matrix PM;
        if(k>0) {
            // preset dimension of new feature space
//            PM = new double[evecs.getRowDimension()][k];
            PM = evecs.getMatrix(0, evecs.getRowDimension()-1, 
                    evecs.getColumnDimension()-k, evecs.getColumnDimension()-1);
        }
        else {
            // dimension will be determined based on scatter energy
            double TotEVal = evals.trace(); // total energy
            double EAccum=0;
            int m=evals.getColumnDimension()-1;
            while(EAccum<Ek*TotEVal){
                EAccum += evals.get(m, m);
                m--;
            }
            PM = evecs.getMatrix(0, evecs.getRowDimension()-1,m+1,evecs.getColumnDimension()-1);
        }

/*            System.out.println("Eigenvectors");                
            for(int i=0; i<r; i++){
                for(int j=0; j<c; j++){
                    System.out.print(evecs[i][j]+" ");
                }
                System.out.println();                
            }
            System.out.println("Eigenvalues");                
            for(int i=0; i<r; i++){
                for(int j=0; j<c; j++){
                    System.out.print(evals[i][j]+" ");
                }
                System.out.println();                
            }
*/
        
        return PM;
    }

    private Matrix computeCovarianceMatrix(double[][] m) {
//        double[][] C = new double[M.length][M.length];
        
        Matrix M = new Matrix(m);
        Matrix MT = M.transpose();       
        Matrix C = M.times(MT);
        return C;
    }

    private double[][] centerAroundMean(double[][] M) {
        
        double[] mean = new double[M.length];
        for(int i=0; i<M.length; i++)
            for(int j=0; j<M[0].length; j++)
                mean[i]+=M[i][j];
        for(int  i=0; i<M.length; i++) mean[i]/=M[0].length;
        for(int i=0; i<M.length; i++)
            for(int j=0; j<M[0].length; j++)
                M[i][j]-=mean[i];
        return M;
    }

    private double[][] projectSamples(Matrix FOld, Matrix TransformMat) {
        
        return (FOld.transpose().times(TransformMat)).transpose().getArrayCopy();
    }
}


class Classifier {
    
    double[][] TrainingSet, TestSet;
    int[] ClassLabels;
    final int TRAIN_SET=0, TEST_SET=1;
    
    void generateTraining_and_Test_Sets(double[][] Dataset, String TrainSetSize){

        int[] Index = new int[Dataset[0].length];
        double Th = Double.parseDouble(TrainSetSize)/100.0;
        int TrainCount=0, TestCount=0;
        for(int i=0; i<Dataset[0].length; i++) 
            if(Math.random()<=Th) {
                Index[i]=TRAIN_SET;
                TrainCount++;
            }
            else {
                Index[i]=TEST_SET;
                TestCount++;
            }   
        TrainingSet = new double[Dataset.length][TrainCount];
        TestSet = new double[Dataset.length][TestCount];
        TrainCount=0;
        TestCount=0;
        // label vectors for training/test sets
        for(int i=0; i<Index.length; i++){
            if(Index[i]==TRAIN_SET){
                System.arraycopy(Dataset[i], 0, TrainingSet[TrainCount++], 0, Dataset[0].length);
            }
            else
                System.arraycopy(Dataset[i], 0, TestSet[TestCount++], 0, Dataset[0].length);                
        }
    }
    
    protected void trainClissifier(double[][] TrainSet){
        
    }
    
}

class NNClassifier extends Classifier {
    
    
    
    @Override
    protected void trainClissifier(double[][] TrainSet){
    
    }
}